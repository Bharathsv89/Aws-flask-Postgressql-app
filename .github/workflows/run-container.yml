name: Deploy Flask App on EC2

on:
  workflow_run:
    workflows: ["Deploy Flask App with Terraform"]
    types:
      - completed

permissions:
  contents: read
  actions: read

jobs:
  run-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: deploy
          path: ./outputs
          github-token: ${{ secrets.HUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Parse Terraform Outputs
        id: vars
        run: |
          DB_HOST=$(jq -r '.db_endpoint.value' ./outputs/terraform_outputs.json)
          EC2_IP=$(jq -r '.ec2_public_ip.value' ./outputs/terraform_outputs.json)
          ECR_REPO=$(jq -r '.ecr_repo_url.value' ./outputs/terraform_outputs.json)

          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > rcb.pem
          chmod 600 rcb.pem

      - name: SSH into EC2 and run Docker
        run: |
          ssh -o StrictHostKeyChecking=no -i rcb.pem ubuntu@${{ env.EC2_IP }} << 'EOF'
            # Update and install Docker and AWS CLI
            sudo apt update -y
            sudo apt install -y docker.io awscli

            # Start Docker and add user to Docker group
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker ubuntu

            # Re-login group (optional, may require reboot)
            newgrp docker <<EONG
              echo "Now in docker group."
            EONG

            # ECR login
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO}

            # Pull and run the latest image
            docker pull ${ECR_REPO}:latest
            docker rm -f flask-app || true

            docker run -d --name flask-app -p 5001:5000 \
              -e DB_HOST=${DB_HOST} \
              -e DB_NAME=greetings_db \
              -e DB_USER=${DB_USERNAME} \
              -e DB_PASS=${DB_PASSWORD} \
              ${ECR_REPO}:latest
          EOF
        env:
          DB_HOST: ${{ env.DB_HOST }}
          EC2_IP: ${{ env.EC2_IP }}
          ECR_REPO: ${{ env.ECR_REPO }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

